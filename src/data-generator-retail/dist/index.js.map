{"version":3,"sources":["../src/index.ts","../src/customers.ts","../src/utils.ts","../src/categories.ts","../src/products.ts","../src/commands.ts","../src/invoices.ts","../src/reviews.ts","../src/finalize.ts"],"sourcesContent":["import { RaRecord } from 'ra-core';\n\nimport generateCustomers from './customers';\nimport generateCategories from './categories';\nimport generateProducts from './products';\nimport generateCommands from './commands';\nimport generateInvoices from './invoices';\nimport generateReviews from './reviews';\nimport finalize from './finalize';\n\nexport interface Db {\n    customers: RaRecord[];\n    categories: RaRecord[];\n    products: RaRecord[];\n    commands: RaRecord[];\n    invoices: RaRecord[];\n    reviews: RaRecord[];\n}\n\nexport default (options = { serializeDate: true }): Db => {\n    const db = {} as Db;\n    db.customers = generateCustomers(db, options);\n    db.categories = generateCategories();\n    db.products = generateProducts(db);\n    db.commands = generateCommands(db, options);\n    db.invoices = generateInvoices(db);\n    db.reviews = generateReviews(db, options);\n    finalize(db);\n\n    return db;\n};\n","import { date, name, internet, address } from 'faker/locale/en';\n\nimport { randomDate, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    // This is the total number of people pictures available. We only use those pictures for actual customers\n    const maxCustomers = 223;\n    let numberOfCustomers = 0;\n\n    return Array.from(Array(900).keys()).map(id => {\n        const first_seen = randomDate();\n        const last_seen = randomDate(first_seen);\n        const has_ordered =\n            weightedBoolean(25) && numberOfCustomers < maxCustomers;\n        const first_name = name.firstName();\n        const last_name = name.lastName();\n        const email = internet.email(first_name, last_name);\n        const birthday = has_ordered ? date.past(60) : null;\n        const avatar = has_ordered\n            ? 'https://marmelab.com/posters/avatar-' +\n              numberOfCustomers +\n              '.jpeg'\n            : undefined;\n\n        if (has_ordered) {\n            numberOfCustomers++;\n        }\n\n        return {\n            id,\n            first_name,\n            last_name,\n            email,\n            address: has_ordered ? address.streetAddress() : null,\n            zipcode: has_ordered ? address.zipCode() : null,\n            city: has_ordered ? address.city() : null,\n            stateAbbr: has_ordered ? address.stateAbbr() : null,\n            avatar,\n            birthday:\n                serializeDate && birthday ? birthday.toISOString() : birthday,\n            first_seen: serializeDate ? first_seen.toISOString() : first_seen,\n            last_seen: serializeDate ? last_seen.toISOString() : last_seen,\n            has_ordered: has_ordered,\n            latest_purchase: null, // finalize\n            has_newsletter: has_ordered ? weightedBoolean(30) : true,\n            groups: [], // finalize\n            nb_commands: 0,\n            total_spent: 0,\n        };\n    });\n};\n","import faker from 'faker/locale/en';\n\nexport const weightedArrayElement = (values, weights) =>\n    faker.random.arrayElement(\n        values.reduce(\n            (acc, value, index) =>\n                acc.concat(new Array(weights[index]).fill(value)),\n            []\n        )\n    );\n\nexport const weightedBoolean = likelyhood =>\n    faker.random.number(99) < likelyhood;\n\nexport const randomDate = (minDate?: Date, maxDate?: Date) => {\n    const minTs =\n        minDate instanceof Date\n            ? minDate.getTime()\n            : Date.now() - 5 * 365 * 24 * 60 * 60 * 1000; // 5 years\n    const maxTs = maxDate instanceof Date ? maxDate.getTime() : Date.now();\n    const range = maxTs - minTs;\n    const randomRange = faker.random.number({ max: range });\n    // move it more towards today to account for traffic increase\n    const ts = Math.sqrt(randomRange / range) * range;\n    return new Date(minTs + ts);\n};\n\nexport const randomFloat = (min, max) =>\n    parseFloat(faker.random.number({ min, max, precision: 0.01 }).toFixed(2));\n","export default () => [\n    { id: 0, name: 'animals' },\n    { id: 1, name: 'beard' },\n    { id: 2, name: 'business' },\n    { id: 3, name: 'cars' },\n    { id: 4, name: 'city' },\n    { id: 5, name: 'flowers' },\n    { id: 6, name: 'food' },\n    { id: 7, name: 'nature' },\n    { id: 8, name: 'people' },\n    { id: 9, name: 'sports' },\n    { id: 10, name: 'tech' },\n    { id: 11, name: 'travel' },\n    { id: 12, name: 'water' },\n];\n","import { random, lorem } from 'faker/locale/en';\n\nimport { randomFloat, weightedBoolean } from './utils';\n\nconst productReferences = {\n    animals: [\n        'Cat Nose',\n        'Dog Grass',\n        'Brown Cow',\n        'Leopard Road',\n        'Sad Dog',\n        'Pelican Pier',\n        'Green Birds',\n        'Concrete Seaguls',\n        'Hiding Seagul',\n        'Sand Caravan',\n    ],\n    beard: [\n        'Black Auburn',\n        'Basket Beard',\n        'Handlebar Moustache',\n        'White Beard',\n        'Sailor Man',\n        'Natural Beard',\n        'Yeard Phone',\n        'Braid Beard',\n        'Terminal Black',\n        'Short Boxed',\n    ],\n    business: [\n        'Corporate Prop',\n        'Office Chairs',\n        'White Clock',\n        'Work Suit',\n        'Suit & Tie',\n        'Shake Hands',\n        'Building Sky',\n        'Yellow Pad',\n        'Work Devices',\n        'Hands Clap',\n        'Work Meeting',\n    ],\n    cars: [\n        'Old Combi',\n        'Asian Plates',\n        'Pedestrian Crossing',\n        'Farmer Boy',\n        'Make Over',\n        'Sports Sunset',\n        'Desert Jeep',\n        'Highway Bridge',\n        'Race Stickers',\n        'White Deluxe',\n    ],\n    city: [\n        'Bridge Lights',\n        'Color Dots',\n        'Cloud Suspension',\n        'Paved Street',\n        'Blue Bay',\n        'Wooden Door',\n        'Concrete Angles',\n        'London Lights',\n        'Fort Point',\n        'Rainy Glass',\n    ],\n    flowers: [\n        'Apricot Tree',\n        'Orange Rose',\n        'Purple Petunia',\n        'Water Lily',\n        'White Peony',\n        'Poppy Field',\n        'Blue Flax',\n        'Love Roses',\n        'California Poppy',\n        'Dalhia Colors',\n    ],\n    food: [\n        'Fuzzy Forks',\n        'Stamp Mug',\n        'Two Expressos',\n        'Red Latte',\n        'Black Grapes',\n        'Forgotten Strawberries',\n        'Close Steam',\n        'Brewing Tea',\n        'Red Onions',\n        'Dark Honey',\n    ],\n    nature: [\n        'Distant Mountains',\n        'Fog Pond',\n        'Sand Rocks',\n        'Pebble Shore',\n        'Eroded Fractals',\n        'Water Fall',\n        'Drif Wood',\n        'Dirt Track',\n        'Green Grass',\n        'Yellow Lichen',\n    ],\n    people: [\n        'Crossing Alone',\n        'Budding Grove',\n        'Light Hair',\n        'Black & White',\n        'Rock Concert',\n        'Meeting Bench',\n        'Son & LumiÃ¨re',\n        'Running Boy',\n        'Dining Hall',\n        'Tunnel People',\n    ],\n    sports: [\n        'Feather Ball',\n        'Wall Skate',\n        'Kick Flip',\n        'Down Hill',\n        'Baseball Night',\n        'Touch Line',\n        'Alone Jogger',\n        'Green Basket',\n        'Mud Hug',\n        'Metal Cycle',\n    ],\n    tech: [\n        'Black Screen',\n        'Phone Call',\n        'Tablet & Phone',\n        'No Battery',\n        'Phone Book',\n        'Camera Parts',\n        'Fuzzy Phone',\n        'Music & Light',\n        'Eye Rest',\n        'Aligned Parts',\n    ],\n    travel: [\n        'Distant Jet',\n        'Foggy Beach',\n        'White Lime',\n        'Mysterious Cloud',\n        'Mountain Top',\n        'Light House',\n        'Gray Day',\n        'Desert Walkway',\n        'Train Track',\n        'Plane Trees',\n    ],\n    water: [\n        'Fresh Stream',\n        'Reed Line',\n        'Mud Tracks',\n        'Beach Gazebo',\n        'Calm Sea',\n        'Early Bath',\n        'Aerial Coast',\n        'Canal Street',\n        'Artificial Beach',\n        'Rainy Day',\n    ],\n};\n\nexport default db => {\n    let id = 0;\n\n    return db.categories.reduce(\n        (acc, category) => [\n            ...acc,\n            ...Array.from(Array(10).keys()).map(index => {\n                const width = randomFloat(10, 40);\n                const height = randomFloat(10, 40);\n\n                return {\n                    id: id++,\n                    category_id: category.id,\n                    reference: productReferences[category.name][index],\n                    width: width,\n                    height: height,\n                    price: randomFloat(\n                        (width * height) / 20,\n                        (width * height) / 15\n                    ),\n                    thumbnail:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    image:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    description: lorem.paragraph(),\n                    stock: weightedBoolean(10)\n                        ? 0\n                        : random.number({ min: 0, max: 150 }),\n                    sales: 0,\n                };\n            }),\n        ],\n        []\n    );\n};\n","import { random } from 'faker/locale/en';\nimport { isAfter, subDays } from 'date-fns';\n\nimport {\n    randomDate,\n    randomFloat,\n    weightedArrayElement,\n    weightedBoolean,\n} from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n    const realCustomers = db.customers.filter(customer => customer.has_ordered);\n\n    return Array.from(Array(600).keys()).map(id => {\n        const nbProducts = weightedArrayElement(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [30, 20, 5, 2, 1, 1, 1, 1, 1, 1]\n        );\n        const basket = Array.from(Array(nbProducts).keys()).map(() => ({\n            product_id: random.number({ min: 0, max: 10 * 13 - 1 }),\n            quantity: weightedArrayElement(\n                [1, 2, 3, 4, 5],\n                [10, 5, 3, 2, 1]\n            ) as number,\n        }));\n\n        const total_ex_taxes = basket.reduce(\n            (total, product) =>\n                total +\n                db.products[product.product_id].price * product.quantity,\n            0\n        );\n\n        const delivery_fees = randomFloat(3, 8);\n        const tax_rate = random.arrayElement([0.12, 0.17, 0.2]);\n        const taxes = parseFloat(\n            ((total_ex_taxes + delivery_fees) * tax_rate).toFixed(2)\n        );\n        const customer = random.arrayElement<any>(realCustomers);\n        const date = randomDate(customer.first_seen, customer.last_seen);\n\n        const status =\n            isAfter(date, aMonthAgo) && random.boolean()\n                ? 'ordered'\n                : weightedArrayElement(['delivered', 'cancelled'], [10, 1]);\n        return {\n            id,\n            reference: random.alphaNumeric(6).toUpperCase(),\n            date: serializeDate ? date.toISOString() : date,\n            customer_id: customer.id,\n            basket: basket,\n            total_ex_taxes: total_ex_taxes,\n            delivery_fees: delivery_fees,\n            tax_rate: tax_rate,\n            taxes: taxes,\n            total: parseFloat(\n                (total_ex_taxes + delivery_fees + taxes).toFixed(2)\n            ),\n            status: status,\n            returned: status === 'delivered' ? weightedBoolean(10) : false,\n        };\n    });\n};\n","export default db => {\n    let id = 0;\n\n    return (\n        db.commands\n            .filter(command => command.status !== 'delivered')\n            // @ts-ignore\n            .sort((a, b) => new Date(a.date) - new Date(b.date))\n            .map(command => ({\n                id: id++,\n                date: command.date,\n                command_id: command.id,\n                customer_id: command.customer_id,\n                total_ex_taxes: command.total_ex_taxes,\n                delivery_fees: command.delivery_fees,\n                tax_rate: command.tax_rate,\n                taxes: command.taxes,\n                total: command.total,\n            }))\n    );\n};\n","import { random, lorem } from 'faker/locale/en';\nimport { subDays, isAfter } from 'date-fns';\n\nimport { randomDate, weightedArrayElement, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n\n    let id = 0;\n    const reviewers = db.customers\n        .filter(customer => customer.has_ordered)\n        .filter(() => weightedBoolean(60)) // only 60% of buyers write reviews\n        .map(customer => customer.id);\n\n    return db.commands\n        .filter(command => reviewers.indexOf(command.customer_id) !== -1)\n        .reduce(\n            (acc, command) => [\n                ...acc,\n                ...command.basket\n                    .filter(() => weightedBoolean(40)) // reviewers review 40% of their products\n                    .map(product => {\n                        const date = randomDate(command.date);\n                        const status = isAfter(aMonthAgo, date)\n                            ? weightedArrayElement(\n                                  ['accepted', 'rejected'],\n                                  [3, 1]\n                              )\n                            : weightedArrayElement(\n                                  ['pending', 'accepted', 'rejected'],\n                                  [5, 3, 1]\n                              );\n\n                        return {\n                            id: id++,\n                            date: serializeDate ? date.toISOString() : date,\n                            status: status,\n                            command_id: command.id,\n                            product_id: product.product_id,\n                            customer_id: command.customer_id,\n                            rating: random.number({ min: 1, max: 5 }),\n                            comment: Array.apply(\n                                null,\n                                Array(random.number({ min: 1, max: 5 }))\n                            )\n                                .map(() => lorem.sentences())\n                                .join('\\n \\r'),\n                        };\n                    }),\n            ],\n            []\n        );\n};\n","import { weightedBoolean } from './utils';\n\nexport default function (db) {\n    // set latest purchase date\n    db.commands.forEach(command => {\n        let customer = db.customers[command.customer_id];\n        if (\n            !customer.latest_purchase ||\n            customer.latest_purchase < command.date\n        ) {\n            customer.latest_purchase = command.date;\n        }\n        customer.total_spent += command.total;\n        customer.nb_commands++;\n    });\n\n    // set product sales\n    db.commands.forEach(command => {\n        command.basket.forEach(item => {\n            db.products[item.product_id].sales += item.quantity;\n        });\n    });\n\n    // add 'collector' group\n    const customersBySpending = db.commands.reduce((customers, command) => {\n        if (!customers[command.customer_id]) {\n            customers[command.customer_id] = { nbProducts: 0 };\n        }\n        customers[command.customer_id].nbProducts += command.basket.length;\n        return customers;\n    }, {});\n    Object.keys(customersBySpending).forEach(customer_id => {\n        if (customersBySpending[customer_id].nbProducts > 10) {\n            db.customers[customer_id].groups.push('collector');\n        }\n    });\n\n    // add 'ordered_once' group\n    db.customers\n        .filter(customer => customer.nb_commands === 1)\n        .forEach(customer => customer.groups.push('ordered_once'));\n\n    // add 'compulsive' group\n    db.customers\n        .filter(customer => customer.total_spent > 1500)\n        .forEach(customer => customer.groups.push('compulsive'));\n\n    // add 'regular' group\n    db.customers\n        .filter(() => weightedBoolean(20))\n        .forEach(customer => customer.groups.push('regular'));\n\n    // add 'returns' group\n    db.commands\n        .filter(command => command.returned)\n        .forEach(command => {\n            if (\n                db.customers[command.customer_id].groups.indexOf('returns') ===\n                -1\n            ) {\n                db.customers[command.customer_id].groups.push('returns');\n            }\n        });\n\n    // add 'reviewer' group\n    db.reviews.forEach(review => {\n        let customer = db.customers[review.customer_id];\n        if (customer.groups.indexOf('reviewer') === -1) {\n            customer.groups.push('reviewer');\n        }\n    });\n\n    // add settings\n    db.settings = [\n        {\n            id: 1,\n            configuration: {\n                url: 'http://posters-galore.com/',\n                mail: {\n                    sender: 'julio@posters-galore.com',\n                    transport: {\n                        service: 'fakemail',\n                        auth: {\n                            user: 'fake@mail.com',\n                            pass: 'f00b@r',\n                        },\n                    },\n                },\n                file_type_whiltelist: [\n                    'txt',\n                    'doc',\n                    'docx',\n                    'xls',\n                    'xlsx',\n                    'pdf',\n                    'png',\n                    'jpg',\n                ],\n            },\n        },\n    ];\n}\n"],"mappings":"gmBAAA,kDCAA,MAA8C,2BCA9C,MAAkB,8BAEL,EAAuB,GAAC,EAAQ,IACzC,UAAM,OAAO,aACT,EAAO,OACH,CAAC,EAAK,EAAO,IACT,EAAI,OAAO,GAAI,OAAM,EAAQ,EAAM,EAAE,KAAK,CAAK,CAAC,EACpD,CAAC,CACL,CACJ,EAPgC,wBASvB,EAAkB,KAC3B,UAAM,OAAO,OAAO,EAAE,EAAI,EADC,mBAGlB,EAAa,GAAC,EAAgB,IAAmB,CAC1D,GAAM,GACF,YAAmB,MACb,EAAQ,QAAQ,EAChB,KAAK,IAAI,EAAI,QAEjB,EAAQ,AADA,aAAmB,MAAO,EAAQ,QAAQ,EAAI,KAAK,IAAI,GAC/C,EAChB,EAAc,UAAM,OAAO,OAAO,CAAE,IAAK,CAAM,CAAC,EAEhD,EAAK,KAAK,KAAK,EAAc,CAAK,EAAI,EAC5C,MAAO,IAAI,MAAK,EAAQ,CAAE,CAC9B,EAX0B,cAab,EAAc,GAAC,EAAK,IAC7B,WAAW,UAAM,OAAO,OAAO,CAAE,MAAK,MAAK,UAAW,GAAK,CAAC,EAAE,QAAQ,CAAC,CAAC,EADjD,eDvB3B,GAAO,GAAQ,GAAC,EAAI,CAAE,mBAAoB,CAGtC,GAAI,GAAoB,EAExB,MAAO,OAAM,KAAK,MAAM,GAAG,EAAE,KAAK,CAAC,EAAE,IAAI,GAAM,CAC3C,GAAM,GAAa,EAAW,EACxB,EAAY,EAAW,CAAU,EACjC,EACF,EAAgB,EAAE,GAAK,EAAoB,IACzC,EAAa,OAAK,UAAU,EAC5B,EAAY,OAAK,SAAS,EAC1B,EAAQ,WAAS,MAAM,EAAY,CAAS,EAC5C,EAAW,EAAc,OAAK,KAAK,EAAE,EAAI,KACzC,EAAS,EACT,uCACA,EACA,QACA,OAEN,MAAI,IACA,IAGG,CACH,KACA,aACA,YACA,QACA,QAAS,EAAc,UAAQ,cAAc,EAAI,KACjD,QAAS,EAAc,UAAQ,QAAQ,EAAI,KAC3C,KAAM,EAAc,UAAQ,KAAK,EAAI,KACrC,UAAW,EAAc,UAAQ,UAAU,EAAI,KAC/C,SACA,SACI,GAAiB,EAAW,EAAS,YAAY,EAAI,EACzD,WAAY,EAAgB,EAAW,YAAY,EAAI,EACvD,UAAW,EAAgB,EAAU,YAAY,EAAI,EACrD,YAAa,EACb,gBAAiB,KACjB,eAAgB,EAAc,EAAgB,EAAE,EAAI,GACpD,OAAQ,CAAC,EACT,YAAa,EACb,YAAa,CACjB,CACJ,CAAC,CACL,EA9Ce,WEJf,GAAO,GAAQ,MAAM,CACjB,CAAE,GAAI,EAAG,KAAM,SAAU,EACzB,CAAE,GAAI,EAAG,KAAM,OAAQ,EACvB,CAAE,GAAI,EAAG,KAAM,UAAW,EAC1B,CAAE,GAAI,EAAG,KAAM,MAAO,EACtB,CAAE,GAAI,EAAG,KAAM,MAAO,EACtB,CAAE,GAAI,EAAG,KAAM,SAAU,EACzB,CAAE,GAAI,EAAG,KAAM,MAAO,EACtB,CAAE,GAAI,EAAG,KAAM,QAAS,EACxB,CAAE,GAAI,EAAG,KAAM,QAAS,EACxB,CAAE,GAAI,EAAG,KAAM,QAAS,EACxB,CAAE,GAAI,GAAI,KAAM,MAAO,EACvB,CAAE,GAAI,GAAI,KAAM,QAAS,EACzB,CAAE,GAAI,GAAI,KAAM,OAAQ,CAC5B,EAde,WCAf,MAA8B,2BAI9B,GAAM,GAAoB,CACtB,QAAS,CACL,WACA,YACA,YACA,eACA,UACA,eACA,cACA,mBACA,gBACA,cACJ,EACA,MAAO,CACH,eACA,eACA,sBACA,cACA,aACA,gBACA,cACA,cACA,iBACA,aACJ,EACA,SAAU,CACN,iBACA,gBACA,cACA,YACA,aACA,cACA,eACA,aACA,eACA,aACA,cACJ,EACA,KAAM,CACF,YACA,eACA,sBACA,aACA,YACA,gBACA,cACA,iBACA,gBACA,cACJ,EACA,KAAM,CACF,gBACA,aACA,mBACA,eACA,WACA,cACA,kBACA,gBACA,aACA,aACJ,EACA,QAAS,CACL,eACA,cACA,iBACA,aACA,cACA,cACA,YACA,aACA,mBACA,eACJ,EACA,KAAM,CACF,cACA,YACA,gBACA,YACA,eACA,yBACA,cACA,cACA,aACA,YACJ,EACA,OAAQ,CACJ,oBACA,WACA,aACA,eACA,kBACA,aACA,YACA,aACA,cACA,eACJ,EACA,OAAQ,CACJ,iBACA,gBACA,aACA,gBACA,eACA,gBACA,mBACA,cACA,cACA,e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","names":[]}